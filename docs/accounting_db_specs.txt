3/6/2014
Cooper Blake
Accounting Software database design

Budgets

Database changes
	- Accounts new fields:
		savings_account_id SMALLINT - FK to Account used for savings
		is_savings TINYINT:  0 or 1. 1 means it can be used for sinking
	- Transactions new field:
		budget_date DATE NOT NULL - used to back-date sinking transactions to prior month
			- defaults to accounting_date
		exclude_from_budget TINYINT:  0 or 1
		- used for depreciation of assets, asset transfers:
			- Legacy depreciation
			- Buying / selling stocks in retirement or savings
			- Retirement investments
	- Budget new field:
		budget_comment varchar(500) - track unusual budget items

Query changes
	Insert / update Accounts - support savings_account_id, is_savings flags
	Account Details - add fields:
		Saved (DB), To Savings (calc), Unspent (calc)
		New query:  sum transactions going into savings-flagged accounts
		Updated query:  filter on budget_date instead of accounting_date
	Budget:  add Comments field

	select a.account_id, a.account_name, ex.account_id as expense_account_id,
	ex.account_name as expense_account_name,
	sum(ledger_amount) as savings_total
	FROM Accounts a
	INNER JOIN Accounts ex ON ex.savings_account_id = a.account_id
	INNER JOIN LedgerEntries le ON le.account_id = a.account_id
	INNER JOIN Transactions t ON t.trans_id = le.trans_id
	WHERE budget_date >= '2014-04-01'
	and budget_date <= '2014-04-15'
	GROUP BY a.account_id, a.account_name, ex.account_id, ex.account_name;

Income - Sinking Withrawals = Expenses + Sinking Contributions
	Sinking:  from Checking -> Checking subaccounts
		or from Checking -> ETrade Savings subaccounts
	- exclude other asset transfers (brokerage -> cash, etc.)
	- examine account database flag for sinking accounts
		- currently only subaccounts under checking/ savings
	- question:  what if we sink money from another account like brokerage?
		- it would be treated as an expense
	- how to budget the difference between expense and sink? could be either one.
		- Should have same budget amount for both
		- each sink account should have associated expense account
		- budget totals could use expense accounts and ignore sink budgets
		- therefore, budgets would indicate "expense" for all long term savings
		- actual expenses will be much less
			- remainders can be calculated in a report for sinking @ end of month
	- monthly budget statistics:
		Budget vs. Actual:
		+ income
		+ sinking draw
		- expenses
		- short term sinking
			- Actual only:  expense budget - expense actual (floor of 0)
		- long term sinking
			- Actual only:  expense budget - expense actual (floor of 0)
		
		= unspent
			- for Budget, this must be allocated until 0
			- for Actual:  discretionary surplus
			- this should *never* be negative!
			- at end of month, this can be manually allocated to another fund
		close of month sinking
			- will usually be a few days after end of prior month
			
		prior month sinking / withdrawals
			- how to prevent showing up for next month stats?
			- checkbox for "prior budget month"?
			- date field for budget date?
				- should never be more than a month behind
		Examples:
			Budget $100, expense $20, saved $20, to save: $60, unspent = $0
			Budget $50, expense $100, saved $0, to save:  $0, unspent = -$50
				- over budget; may be able to compensate by draw from savings
			Budget $50, expense $100, saved -$50, to save:  0,  unspent = $0
				- over budget, drew from savings to compensate
			Budget $100, expense $130, saved $0, to save $0, unspent = -$30
				- over budget, net loss to budget

		Aggregate statistics (budget vs. actual):
			Total income + Total savings draw
			- Total expenses - Total sinking - should be $0


Login
	login_id		PK	tinyint
	login_user			varchar(25)
	login_password			varchar(25)
	login_admin			tinyint (0 or 1)
	display_name			varchar(50)	Descriptive name (Cooper S. Blake)

Transactions
	trans_id		PK	int
	login_id		FK	tinyint
	trans_descr			varchar(50)
	trans_date			date		orders transactions on the screen
	accounting_date			date		date when transaction gets totalled
	trans_vendor			varchar(50)
	trans_comment		null	text
	check_number		null	smallint
	gas_miles		null	decimal(4, 0)
	gas_gallons		null	decimal(4, 2)
	import_id		null	smallint
	updated_time	timestamp  default current_timestamp
	trans_status	tinyint default 1
	budget_date			date - Used to back-date transactions for budgeting

LedgerEntries
	ledger_id		PK	int
	trans_id		FK	int
	account_id		FK	smallint
	ledger_amount			decimal(9, 2)	9,999,999.99 max


Accounts
	account_id		PK	smallint
	login_id		FK	tinyint
	account_parent_id	FK(nl)	smallint	link to own table for parent accounts
	account_name			varchar(25)
	account_descr			varchar(50)
	account_debit			tinyint (1 = debit, -1 = credit)
	equation_side			enum ('L', 'R')	left vs. right side of the equation
	monthly_budget_default	decimal(8,2) (default 0)
	active					tinyint (default 1)
	updated_time	timestamp
	savings_account_id	FK	smallint Savings linked to an Expense account
	is_savings			tinyint - 0 or 1; defaults to 0
	
Budget
	budget_id	PK	int
	account_id	FK	smallint
	budget_month	date
	budget_amount	decimal(8,2)
	updated_time	timestamp
	budget_comment	varchar(500)
	
	
create table Budget (
	budget_id int not null auto_increment primary key,
	account_id smallint not null,
	budget_month date not null,
	budget_amount decimal(8,2) not null,
	updated_time timestamp not null default current_timestamp on update current_timestamp,
	constraint unique index budget_uk (account_id, budget_month)
);

alter table Accounts
add updated_time timestamp on update current_timestamp;

alter table Accounts
modify monthly_budget_default decimal(8,2) not null default 0;

select a.account_id, a.account_name, a.monthly_budget, b.*,
case a.account_id when 24 then 1 else 0 end as is_parent
from Accounts a
left join Budget b on b.account_id = a.account_id
where a.active = 1
and (a.account_id = 24 or a.account_parent_id = 24)
order by is_parent DESC, account_name;

SELECT a.account_id, a.account_name, a.monthly_budget, b.budget_amount, case a.account_id when 14 then 1 else 0 end as is_parent FROM Accounts a LEFT JOIN Budget b on b.account_id = a.account_id AND b.budget_month = '2014-03-01' WHERE a.active = 1 and (a.account_id = 14 or a.account_parent_id = 14) ORDER BY is_parent DESC, account_name;



SELECT ifnull(a2.account_id, a.account_id) as account_id,
  sum( a.monthly_budget_default ) +
 min(ifnull(a2.monthly_budget_default, 0.0)) as monthly_budget,
 min( ifnull( a2.account_name, a.account_name ) ) as name
FROM Accounts a
LEFT JOIN Accounts a2 ON a.account_parent_id = a2.account_id
 AND a2.account_id <> 14
WHERE (a.account_parent_id = 14
  OR a2.account_parent_id = 14
  OR a.account_id = 14)
  AND a.active = 1
GROUP BY ifnull(a2.account_id, a.account_id)
ORDER BY monthly_budget DESC, name

select parent.account_id,
parent.monthly_budget_default +
sum(ifnull(child.monthly_budget_default, 0.0)) as budget,
  parent.account_name
from Accounts parent
left join Accounts child ON child.account_parent_id = parent.account_id
	and child.active = 1
	and child.account_parent_id <> 14
where (parent.account_parent_id = 14 OR parent.account_id = 14) and parent.active = 1
group by parent.account_id, parent.account_name, parent.monthly_budget_default
order by budget DESC, account_name;

select account_id, budget, account_name from (
select parent.account_id,
pb.budget_amount +
sum(ifnull(cb.budget_amount, 0.0)) as budget,
  parent.account_name, 0 as is_parent
from Accounts parent
inner join Budget pb ON pb.account_id = parent.account_id
	AND pb.budget_month = '2014-03-01'
left join Accounts child ON child.account_parent_id = parent.account_id
	and child.active = 1
left join Budget cb ON cb.account_id = child.account_id
	AND cb.budget_month = '2014-03-01'
where (parent.account_parent_id = 14) and parent.active = 1
group by parent.account_id, parent.account_name, pb.budget_amount

UNION ALL

select a.account_id, b.budget_amount as budget,
concat(account_name, ' (top)') as account_name, 1 as is_parent
from Accounts a
inner join Budget b ON b.account_id = a.account_id
	AND b.budget_month = '2014-03-01'
where a.account_id = 14) query
order by is_parent DESC, budget DESC, account_name;

PAGES

Session Vars
	login_id		-1 = not logged in
	login_user
	display_name
	login_admin

1. Login Page
	Objects: username, password, Submit button
	Actions: authenticate, redirect to Account Ledger
2. Manage Accounts
	Objects:
		Top Account, Secondary Account, Tertiary Account (drop down)
		New account name, New account description (text box)
		Normal balance, Equation side (drop down)
		Edit, Save (button)
	Actions:
		Top Parent selection queries for Secondary parents
		Secondary queries for Tertiary
		Save button performs update or insert
		Edit button loads data of deepest selected account
	Code:
		Verify that login_admin session var is 1
		Load Top Account with all parent-less accounts
			Each Top selection populates Secondary
			Each Secondary selection populates Tertiary
			Always reload existing selections
		Edit: load selected tertiary / secondary / top account as selected
		Save: insert or update records as required
3. Account Ledger
	Objects:
		Filter Bar: select account, from date, to date, row limit, total period, filter button
			Revenue total period = Monthly, Yearly, Visible dates
		Transaction display:
			Date, Description, Vendor, Account, Amount, Total
			Edit button for each row
		New / Edit Transaction:
			Date, Check #, Miles, Gallons, Description, Vendor (text box)
			Note (text area)
			Account / Amount ledger entries
				5 rows: 1 column LHS, 2 columns RHS
			Totals: Assets - Liabilities, Revenue - Expenses (text)
			Save, Delete (button)
				Delete is only visible when in Edit mode
	Actions:
		Filter account select or Filter button press: re-query the database
			1 query is run for all the transaction data
			1 aggregate query is run for each transaction: total amount
				- stored in an array for retrieval on display
		Transaction Edit buttons populate the Transaction box
		Transaction Save button inserts or updates as needed
			Box is then cleared & reset to Add mode
	Code:
		Account is always selected: default to Liabilities ?
		Default start date as first of current month
		Default end date as end of current month
		Default limit to 10
		Default Revenue Total Period to Monthly
		Filter button runs the Get_transaction_list method & redraws
		Edit buttons populate the transaction box
			Always in either Edit or Insert mode


CLASSES

Account
	Attributes
		Variable		Default value
		account_id		-1	indicates new account
		login_id		-1	must be initialized
		account_parent_id	null
		account_name		""
		account_descr		""
		account_debit		1
		equation_side		'L'
	Methods
		Account(login_id, account_parent_id, account_name
			account_descr, account_debit, equation_side)
			Constructor for new account
		Load_account(account_id)
			Populate fields from database
		Save_account()
			Updates or inserts to database, depending on account_id
		Get_account_list(login_id, equation_side = '', account_parent_id = -1)
			Static function: class does not need to be instantiated
			Returns an array with the specified accounts.
			With just one argument, it will get all accounts for the given user.
			List
				key = account_id
				value = account_name

Transaction
	Attributes
		trans_id		-1
		login_id		-1
		trans_descr		''
		trans_date		0
		accounting_date		0
		trans_vendor		''
		trans_comment		''
		check_number		-1
		gas_miles		-1
		gas_gallons		-1
		account_display		''
		ledger_amount		null
	
	Methods
		Transaction(login_id, trans_descr, trans_date, accounting_date,
			trans_vendor, trans_comment, check_number, gas_miles,
			gas_gallons, trans_id = -1, account_display = '',
			ledger_amount = null)
			Constructor for new transaction
		Load_transaction(trans_id)
			Populate from database
		Save_transaction()
			Updates or inserts into database
		Get_transaction_list(account_id, start_date, end_date, limit)
			Static function
			1. Queries account_id to get account_debit
			2. Queries for all the transactions in the range
				For each transaction, an object is created.
			3. Queries the total amount for each transaction & stores in a list
			Returns an array of transaction objects
		
		
Utilities
	Functions
		Build_dropdown(data_list, dropdown_name) => string
			List must be of format value->Text.
			This takes a key/value list and returns the HTML of a dropdown control


QUERIES

Expense Savings Query:

select a.account_id, ex.account_id as expense_account_id,
a.account_name as savings_account_name,
a.account_parent_id, ap.account_name as parent_name,
sum(IFNULL(tle.ledger_amount, 0.0) * a.account_debit) as savings_total
FROM Accounts a
INNER JOIN Accounts ex ON ex.savings_account_id = a.account_id
INNER JOIN Accounts ap ON ap.account_id = a.account_parent_id
LEFT JOIN (select le.ledger_amount, le.account_id, t.budget_date, t.exclude_from_budget
  from Transactions t
  JOIN LedgerEntries le ON le.trans_id = t.trans_id) as tle
  ON tle.account_id = a.account_id
 and tle.budget_date >= '2015-11-01'
 and tle.budget_date <= '2015-11-30'
 and tle.exclude_from_budget = 0
WHERE a.login_id = 1
GROUP BY a.account_id, a.account_name, ex.account_id
ORDER BY a.account_parent_id, a.account_name;


List of accounts

	select coalesce(a3.account_name + ':', '')
		+ coalesce(a2.account_name + ':', '')
		+ a.account_name as account_display,
		account_id
	from Accounts a		-- represents any account (top to bottom)
	left join Accounts a2 on
	  a.account_parent_id = a2.account_id
	left join Accounts a3 on
	  a2.account_parent_id = a3.account_id
	where a.login_id = X

V = selected_account_debit

Account Ledger entries: list all transactions on an account & its children.
	Running totals of accounts have to be queried separately.
	- LHS: show all-time total
	- RHS: show monthly or YTD total
	select trans_id, trans_date, trans_descr, a.account_name,
	  a2.account_name as account2_name,
	  (ledger_amount * a.account_debit * V) as amount	--V = selected account debit value
	from Transactions t
	inner join LedgerEntries le on
		le.trans_id = t.trans_id
	inner join Accounts a on
		le.account_id = a.account_id
	left join Accounts a2 on	-- join the account's parent, if it exists
		a.account_parent_id = a2.account_id
	where (a.account_id = X
	  or a2.account_id = X
	  or a2.account_parent_id = X )
	  and trans_date >= [start date]
	  and trans_date <= [end date]
	order by trans_date DESC, t.trans_id DESC	--needed to use LIMIT; must reverse row order on display
	limit Y		--optional limit clause

Current Balance (debit accounts)
	select sum(ledger_amount * a.account_debit * V) as balance
	from LedgerEntries le
	inner join Transactions t on
		le.trans_id = t.trans_id
	inner join Accounts a on
		le.account_id = a.account_id
	left join Accounts a2 on
		a.account_parent_id = a2.account_id
	where (a.account_id = Y or
	  a2.account_id = Y or a2.account_parent_id = Y) and
	  (t.accounting_date < X or
	   t.accounting_date = X and t.trans_id <= Z)


Monthly Total
	select sum(ledger_amount * a.account_debit * V) as monthly_total
	from LedgerEntries le
	inner join Transactions t on
		le.trans_id = t.trans_id
	inner join Accounts sel on	--currently selected account
		sel.account_id = Y
	inner join Accounts a on
		le.account_id = a.account_id
	left join Accounts a2 on
		a.account_parent_id = a2.account_id
	where (a.account_id = Y or
	  a2.account_id = Y or a2.account_parent_id = Y) and
	  t.accounting_date >= W and
	  (t.accounting_dat